wget https://rpmfind.net/linux/centos/8-stream/BaseOS/x86_64/os/Packages/rpm-4.14.3-19.el8.x86_64.rpm
wget https://rpmfind.net/linux/centos/8-stream/BaseOS/x86_64/os/Packages/rpm-libs-4.14.3-19.el8.x86_64.rpm
wget https://dl.rockylinux.org/pub/rocky/8/BaseOS/aarch64/os/Packages/s/selinux-policy-3.14.3-108.el8.noarch.rpm

sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/libsemanage-2.9-9.el8.x86_64.rpm --allowerasing -y
sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/policycoreutils-2.9-19.el8.x86_64.rpm -y

sudo rpm -i --force rpm-4.14.3-19.el8.x86_64.rpm
sudo rpm -i --force rpm-libs-4.14.3-19.el8.x86_64.rpm
sudo rpm -i --force selinux-policy-3.14.3-108.el8.noarch.rpm

sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/python3-libsemanage-2.9-9.el8.x86_64.rpm -y
sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/python3-policycoreutils-2.9-19.el8.noarch.rpm -y
sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/policycoreutils-python-utils-2.9-19.el8.noarch.rpm -y
sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/selinux-policy-minimum-3.14.3-108.el8.noarch.rpm -y
sudo yum install http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/libseccomp-2.5.2-1.el8.x86_64.rpm -y

sudo yum install https://download-ib01.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/s/snapd-selinux-2.57.6-2.el8.noarch.rpm -y

sudo yum install snapd -y
sudo yum update snapd  -y



mkdir workspace

cd workspace

git clone [https://github.com/osrf/gazebo.git](https://github.com/osrf/gazebo.git)

cd gazebo

mkdir build

cd build
cmake ../

https://github.com/gazebosim/sdformat/releases/tag/sdformat9_9.3.0


mkdir sdformat9.3.0/build

cd sdformat9.3.0/build

cmake  ../

sudo make install

https://github.com/ProfFan/ignition-math
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"


git clone https://github.com/Homebrew/brew homebrew
eval "$(homebrew/bin/brew shellenv)"
brew update --force --quiet
chmod -R go-w "$(brew --prefix)/share/zsh"



bash -c 'cat << EOF > /etc/yum.repos.d/ROS.repo
[openEulerROS-humble]
name=openEulerROS-humble
baseurl=https://eulermaker.compass-ci.openeuler.openatom.cn/api/ems1/repositories/ROS-SIG-Multi-Version_ros-humble_openEuler-24.03-LTS-TEST4/openEuler%3A24.03-LTS/aarch64/
enabled=1
gpgcheck=0y
EOF'

dnf install "ros-humble-*" --skip-broken --exclude=ros-humble-generate-parameter-library-example


### 1. ROS2
#### 1.1 创建包
使用命令 ros2 pkg create --build-type ament_cmake riscv-ros-pkg 创建一个新的ROS2包。

#### 1.2 包中的可执行文件
通过 ros2 pkg executables turtlesim 查看 turtlesim 包中的可执行文件。


#### 1.3 列出所有包
运行 ros2 pkg list 来列出当前系统中所有的ROS2包。

#### 1.4 包的安装路径
使用 ros2 pkg prefix turtlesim 来查找 turtlesim 包的安装路径。


#### 1.5 包的XML文件
通过 ros2 pkg xml turtlesim 查看 turtlesim 包的XML描述文件。

### 2. 运行工具
使用 ros2 run demo_nodes_cpp talker 来运行一个名为 talker 的节点。

### 3. 话题工具
#### 3.1 列出所有话题
执行 ros2 topic list 来查看当前系统中所有的话题。

#### 3.2 话题信息
使用 ros2 topic info /rosout 来获取 /rosout 话题的详细信息。

#### 3.3 话题类型
通过 ros2 topic type /rosout 来查看 /rosout 话题的消息类型。


#### 3.4 查找话题类型
使用 ros2 topic find rcl_interfaces/msg/Log 来查找指定消息类型的话题。


#### 3.5 话题发布频率
先运行 ros2 run demo_nodes_cpp talker，然后使用 ros2 topic hz /chatter 来测量 /chatter 话题的发布频率。


#### 3.6 话题带宽
同样在运行 talker 后，使用 ros2 topic bw /chatter 来测量 /chatter 话题的带宽。

#### 3.7 监听话题
在运行 talker 后，使用 ros2 topic echo /chatter 来监听 /chatter 话题的内容。


### 4. 参数工具
在运行 ros2 run demo_nodes_cpp talker 后，使用 ros2 param list 来列出当前节点的所有参数。

### 5. 服务工具
在运行 talker 后，使用 ros2 service list 来列出当前节点提供的所有服务。

### 6. 节点工具
#### 6.1 列出所有节点
在运行 talker 后，使用 ros2 node list 来列出当前系统中所有的节点。


#### 6.2 节点信息
在运行 talker 后，使用 ros2 node info /talker 来获取 talker 节点的详细信息。


### 7. 包记录工具
使用 ros2 bag record -a 来记录所有话题的数据。


#### 7.1 包信息
使用 ros2 bag info rosbag2_2024_06_24-02_18_57/rosbag2_2024_06_24-02_18_57_0.db3 来查看包的详细信息。

#### 7.2 播放包
使用 ros2 bag play rosbag2_2024_06_24-02_18_57/rosbag2_2024_06_24-02_18_57_0.db3 来播放记录的数据。


### 8. 启动工具
使用 ros2 launch demo_nodes_cpp talker_listener.launch.py 来启动一个包含多个节点的启动文件。


### 9. 接口工具
#### 9.1 列出所有接口
使用 ros2 interface list 来列出系统中的所有接口，包括消息、服务和动作。


#### 9.2 接口包
使用 ros2 interface package action_msgs 来查看 action_msgs 包中的接口。


#### 9.3 接口包列表
使用 ros2 interface packages 来列出所有接口包。


#### 9.4 显示接口详细内容A
消息
使用 ros2 interface show geometry_msgs/msg/TwistStamped 来查看消息的详细内容。



服务
使用 ros2 interface show action_msgs/srv/CancelGoal 来查看服务的详细内容。


动作
使用 ros2 interface show action_tutorials_interfaces/action/Fibonacci 来查看动作的详细内容。


#### 9.5 消息模板
使用 ros2 interface proto geometry_msgs/msg/TwistStamped 来查看消息的模板。


### 10. 测试ROS通信组件
#### 10.1 话题通信
C++实现
使用 ros2 run demo_nodes_cpp talker 和 ros2 run demo_nodes_cpp listener 来测试话题通信。


Python实现
ros2 run demo_nodes_py talker
ros2 run demo_nodes_py listener 来测试话题通信。


#### 10.2 服务通信
C++实现
ros2 run demo_nodes_cpp add_two_ints_server
ros2 run demo_nodes_cpp add_two_ints_client

Python实现
ros2 run demo_nodes_py add_two_ints_server
ros2 run demo_nodes_py add_two_ints_client

#### 10.3 测试ROS坐标转换
坐标转换的发布和订阅
ros2 run tf2_ros static_transform_publisher 1 1 1 0 0 0 /base_link /odom
ros2 run tf2_ros tf2_echo base_link odom


tf_monitor监控
ros2 run tf2_ros static_transform_publisher 1 1 1 0 0 0 /base_link /odom
ros2 run tf2_ros tf2_monitor


#### 10.4 view_frames保存pdf
ros2 run tf2_ros static_transform_publisher 1 1 1 0 0 0 /base_link /odom
ros2 run tf2_tools view_frames


ros2 run turtlesim turtlesim_node 和 ros2 run turtlesim turtle_teleop_key


bash -c 'cat << EOF > /etc/yum.repos.d/ROS.repo
[openEulerROS-humble]
name=openEulerROS-humble
baseurl=https://eulermaker.compass-ci.openeuler.openatom.cn/api/ems1/repositories/ROS-SIG-Multi-Version_ros-humble_openEuler-24.03-LTS-TEST4/openEuler%3A24.03-LTS/x86_64/
enabled=1
gpgcheck=0
EOF'

dnf install "ros-humble-*" --skip-broken --exclude=ros-humble-generate-parameter-library-example

source /opt/ros/humble/setup.sh
source ~/.bashrc

https://blog.csdn.net/u013013023/article/details/109998697
git clone https://github.com/ignitionrobotics/ign-cmake -b ign-cmake0
git clone https://github.com/ignitionrobotics/ign-common -b ign-common1
git clone https://github.com/ignitionrobotics/ign-fuel-tools -b ign-fuel-tools1
git clone https://github.com/ignitionrobotics/ign-math -b ign-math4
git clone https://github.com/ignitionrobotics/ign-msgs -b ign-msgs1
git clone https://github.com/ignitionrobotics/ign-transport -b ign-transport4










如何在openEuler 2404 ros2-humble下使用google的Cartographer
引用ref：
cartographer github repo
openEulerRunner
build guide
colcon guide
x86 平台下指北
首先跑起来openEuler的x86镜像。
本人使用openeulerRunner直接跑起来了，再次跳过。
sudo apt install python3-colcon-common-extensions python3-rosdepPrerequest: 
ros2 humble openeuler2403
Don't panic.
Build from source.
首先下载src openeuler下面的humble分支到xx_ws/src/下面，把对应的压缩包解压，并且
mkdir ros2_ws
cd ros2_ws
mkdir src
cd src

git clone https://gitee.com/src-openeuler/cartographer_ros.git
git checkout humble

tar xf ros-humble-cartographer-ros_2.0.9000.orig.tar.gz
tar xf ros-humble-cartographer-ros-msgs_2.0.9000.orig.tar.gz
tar xf ros-humble-cartographer-rviz_2.0.9000.orig.tar.gz

cd ros-humble-cartographer-ros-2.0.9000/
patch -p1 < ../cartographer-ros-adapt-glog-0.6.0.patch

patch -p1 < ../cartographer-ros-fix-multiple-definition-error.patch
patch -p1 < ../cartographer-ros-fix-absl.patch
cd ..
patch -p1 < ../cartographer-rviz-fix-absl.patch
cd ../../..
source /opt/ros/humble/setup.bash
colcon build
